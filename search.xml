<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ArrayList最大限度</title>
      <link href="/2022/11/15/ArrayList%E6%9C%80%E5%A4%A7%E9%99%90%E5%BA%A6/"/>
      <url>/2022/11/15/ArrayList%E6%9C%80%E5%A4%A7%E9%99%90%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<p>查看</p><span id="more"></span><p><strong>因为自己作为数组</strong><br>除了存储数据本身以外，还需要32 bytes的大小来存储对象头（object header）信息。Java每个对象都包含了对象头，HotSpot虚拟机中对象头的大小不会超过32 bytes，所以最大容量减8才不会溢出。</p><p>我们知道，Java对象在堆内存中的存储布局可以分为三部分：对象头（object header），实例数据（Instance Data）和对齐填充（Padding）。</p><p><strong>对象头包括:</strong></p><p>Mark Word：用于对象自身的运行时数据存储，如HashCode，GC分代年龄，锁状态标志，线程持有的锁，偏向线程ID和偏向时间戳等；<br>Klass Pointer：对象指向它类元数据的指针，JVM通过这个指针长度来确定对象是哪个类的实例。<br>数组长度（只有数组对象才有）：记录数组对象的长度。</p><p><strong>我们知道 8 int（整数） 就等于32 bytes（字节），所以减去对象头大小的32 bytes来源于：</strong></p><p>32 bytes &#x3D; 8 bytes（Mark Word的最大占用） + 8 bytes（Klass Pointer的最大占用）+ 4 bytes（数组长度）+ 8 bytes（引用指针的最大占用：数组中存放的是对象的引用）</p><ul><li>4 bytes（padding：为了方便寻址，JVM要求对象大小要求是8的倍数，不够就填充）</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HashCode算法</title>
      <link href="/2022/11/15/HashCode%E7%AE%97%E6%B3%95/"/>
      <url>/2022/11/15/HashCode%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>查看</p><span id="more"></span><h3 id="判断两个元素是否相同，"><a href="#判断两个元素是否相同，" class="headerlink" title="判断两个元素是否相同，"></a>判断两个元素是否相同，</h3><p>1.调用hashCode，判断两个元素的hashcod值<br>2.调用equals判断两个元素，返回的boolean值</p><p>条件满足，hashmap，hashset则视为两元素为同一对象<br>：：:<br>只要有一点为false，则视为两元素不为同一对象</p><hr><h3 id="2-关于第二点，两个对象的hashCode相同，它们并不一定相同"><a href="#2-关于第二点，两个对象的hashCode相同，它们并不一定相同" class="headerlink" title="2.关于第二点，两个对象的hashCode相同，它们并不一定相同"></a>2.关于第二点，两个对象的hashCode相同，它们并不一定相同</h3><p> 也就是说，不同对象的hashCode可能相同；假如两个Java对象A和B，A和B不相等（eqauls结果为false），<br>    但A和B的哈希码相等，将A和B都存入HashMap时会发生哈希冲突，也就是A和B存放在HashMap内部数组的位置索引相同这时HashMap会在该位置建立一个链接表，<br>    将A和B串起来放在该位置，显然，该情况不违反HashMap的使用原则，是允许的。！！！当然，哈希冲突越少越好，尽量采用好的哈希算法以避免哈希冲突。！！！</p><p> <em><strong>所以，Java对于eqauls方法和hashCode方法是这样规定的:</strong></em>    </p><p>　　1.如果两个对象相同，那么它们的hashCode值一定要相同；</p><pre><code> 2.如果两个对象的hashCode相同，它们并不一定相同（这里说的对象相同指的是用eqauls方法比较）。      如不按要求去做了，会发现相同的对象可以出现在Set集合中，同时，增加新元素的效率会大大下降。  3.equals()相等的两个对象，hashcode()一定相等；equals()不相等的两个对象，却并不能证明他们的hashcode()不相等。    换句话说，equals()方法不相等的两个对象，hashcode()有可能相等（我的理解是由于哈希码在生成的时候产生冲突造成的）。    反过来，hashcode()不等，一定能推出equals()也不等；hashcode()相等，equals()可能相等，也可能不等。  在object类中，hashcode()方法是本地方法，返回的是对象的地址值，而object类中的equals()方法比较的也是两个对象的地址值，如果equals()相等，说明两个对象地址值也相等，当然hashcode()也就相等了；在String类中，equals()返回的是两个对象内容的比较，当两个对象内容相等时，Hashcode()方法根据String类的重写代码的分析，也可知道hashcode()返回结果也会相等。以此类推，可以知道Integer、Double等封装类中经过重写的equals()和hashcode()方法也同样适合于这个原则。当然没有经过重写的类，在继承了object类的equals()和hashcode()方法后，也会遵守这个原则。</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java高阶应用</title>
      <link href="/2022/11/15/java%E9%AB%98%E9%98%B6%E5%BA%94%E7%94%A8/"/>
      <url>/2022/11/15/java%E9%AB%98%E9%98%B6%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>查看</p><span id="more"></span><h4 id="1-集合框架–数组存储长度不固定，无法预估查v都的场景不再使用，因此提出集合框架解决该问题"><a href="#1-集合框架–数组存储长度不固定，无法预估查v都的场景不再使用，因此提出集合框架解决该问题" class="headerlink" title="1.集合框架–数组存储长度不固定，无法预估查v都的场景不再使用，因此提出集合框架解决该问题"></a>1.集合框架–数组存储长度不固定，无法预估查v都的场景不再使用，因此提出集合框架解决该问题</h4><p>1.1<br>（1）为了表示操作一堆数据而规定的一种统一的标准体系结构–可用于存储多个数据，摆脱了数组存储长度不可变的缺点<br>（2）java集合框架都对应存储在java.util包下</p><h4 id="1-2集合框架有一系列的类组成的，参考–（异常）"><a href="#1-2集合框架有一系列的类组成的，参考–（异常）" class="headerlink" title="1.2集合框架有一系列的类组成的，参考–（异常）"></a>1.2集合框架有一系列的类组成的，参考–（异常）</h4><h4 id="1-3-list-按照存入数据的顺序，对数据进行存储"><a href="#1-3-list-按照存入数据的顺序，对数据进行存储" class="headerlink" title="1.3 list-按照存入数据的顺序，对数据进行存储"></a>1.3 list-按照存入数据的顺序，对数据进行存储</h4><p>（1.3.1）对数组结构的升级，能够实现数组的功能，并且长度可变<br>（1.3.2）结构特点，存入元素按照存入顺序排列，可以存入相同的数据—（有序可重复）<br>（1.3.3）实现类-ArrayList&#x2F;LinkedLIst<br>#####（1.3.3.1）ArrayList–是一个底层采用了数组结构实现的List接口类(object类型的数组-对象数组)–{transient object[] elemenData}</p><pre><code>每次存满时会自己扩容 长度为 &#123; new length = length*1.5&#125; 最大长度限值为:integer-8；(原因在Arraylist最大值限度)存储的所在数据在内存空间上时连续的移除中间某个元素效率较低，末尾不受影响查找元素效率较高</code></pre><p>#####(1.3.3.2)&#x2F;linkdlist<br>    采用双向链表结构，实现的list接口</p><pre><code>/* * [prev-存储上一个内存地址]--头 * [item-用于存储数据信息]--身 * [next-用于存储下一个内存地址]--尾 * */    linkdlist 的每一个元素是一个Node&lt;e&gt;对象，存储数据--[没有扩容的概念--理论上可以无限扩容]    结构特征：采用了一个私有的静态内部类组成   存储空间不连续：(插入与删除最多只需要三个元素-效率较高)--(也导致查询效率不高)</code></pre><p>2.实用类–（包装类）（枚举类）（日期类）（字符串）<br>3.i&#x2F;o流<br>4.反射机制<br>5.多线程</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JAVA</title>
      <link href="/2022/11/11/JAVA-0/"/>
      <url>/2022/11/11/JAVA-0/</url>
      
        <content type="html"><![CDATA[<p>查看</p><span id="more"></span><h2 id="1-java"><a href="#1-java" class="headerlink" title="1.java"></a>1.java</h2><h3 id="1-1-java虚拟机运行时内存分配模型"><a href="#1-1-java虚拟机运行时内存分配模型" class="headerlink" title="1.1 java虚拟机运行时内存分配模型"></a>1.1 java虚拟机运行时内存分配模型</h3><p><strong>程序计数器</strong>：用来记录程序应该运行到哪一行（分支，循环，跳转，异常，线程恢复）<br><strong>本地方法栈</strong>：用于保存使用 native 修饰的方法<br><strong>方法区</strong>：用于存储类的信息，和使用 static 修饰的变量（类的信息（父类，属性，方法））<br><strong>虚拟机栈</strong>：用于保存变量信息 -对于基本数据类型变量由于数据所占内存空间较小，因此会直接存储在该空间中<br>      对于引用数据类型来说，因为引用数据类型值过大，在栈空间中 会保存相对应堆内的地址<br>     栈（stack）其特点是先入后出（frist in last out）<br><strong>堆</strong>：用于保存对象，数组，引用数据类型的 <strong>值</strong></p><h3 id="1-2-关于子类继承父类"><a href="#1-2-关于子类继承父类" class="headerlink" title="1.2 关于子类继承父类"></a>1.2 关于子类继承父类</h3><p>最近学习继承中，子类继承父类继承属性的时候有个好玩的点<br><img src="/2022/11/11/JAVA-0/jicheng.png"><br>子类会与父类共用父类的属性<br>子类继承父类的时候会有自己独特的属性–这个属性可以与父类属性同名<br><span style="display:block;text-align:center;color:pink;">（super不能调用查看，原因在于，这个是属性是子类自己独有的 并不是公共属性）</span></p><h3 id="1-3-java中的异常机制"><a href="#1-3-java中的异常机制" class="headerlink" title="1.3 java中的异常机制"></a>1.3 java中的异常机制</h3><p><strong>捕获异常</strong>：程序运行中捕获可能会出现的异常情况；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">s=t.number1(<span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">System.out.println(s);</span><br><span class="line">System.out.println(<span class="string">&quot;程序正常执行&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line"><span class="comment">//有参构造器，可以给detailMessage赋值 调用get方法</span></span><br><span class="line">System.out.println(e.getMessage());</span><br><span class="line"><span class="comment">//只打印异常信息</span></span><br><span class="line"><span class="comment">//e.printStackTrace();</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;您输入的赋值有问题!&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;程序结束&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><span style="display:block;text-align:center;color:pink;">只要有finally那么无论是否执行catch都会执行finally分支</span></p><p><em>这是斜体</em></p><p><em><strong>这是粗斜体</strong></em></p><p><del>这里是删除线</del></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">链接:[<span class="string">百度</span>](<span class="link">https://www.baidu.com</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-2-代码块测试"><a href="#1-2-代码块测试" class="headerlink" title="1.2 代码块测试"></a>1.2 代码块测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// FileName: HelloWorld.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">  <span class="comment">// Java 入口程序，程序从此入口</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello,World!&quot;</span>); <span class="comment">// 向控制台打印一条语句</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-3-HTML-语法"><a href="#1-3-HTML-语法" class="headerlink" title="1.3 HTML 语法"></a>1.3 HTML 语法</h3><p><span style="display:block;text-align:center;color:orangered;">橙色居中</span></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo 如何新建上传 日志</title>
      <link href="/2022/10/27/hello-world/"/>
      <url>/2022/10/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
